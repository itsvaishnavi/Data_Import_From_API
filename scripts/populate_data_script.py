# Importing essential libraries
import requests
import pyodbc
import variables #python file with name 'variables.py'

class MainClass():
	def __init__(self):
		"""
		This constructor is used to import all the variables declared in Data class.
		Here, we have connected to the database using pyodbc module.
		"""
		self.__d = variables.Data()
		self.__conn = pyodbc.connect(Trusted_Connection=self.__d.trusted_connection,Driver=self.__d.driver_name,Server=self.__d.server_name,Database=self.__d.database_name)
		self.__cur= self.__conn.cursor()
		if (self.__conn):
			print("Database connection is successful!")
		else:
			print("Database connection failed. Please check again!")

	def get_response(self,api_endpoint:str) -> list:
		"""
		This function collects the response from API endpoint.
		If successful, returns the json response. Else returns [-1]
		"""
		response = requests.get(self.__d.baseURL+api_endpoint)
		if response.headers['Content-Type'] == 'application/json' and response.status_code == 200:
			return response.json()
		else:
			return [-1]

	def process_response(self,api_endpoint:str,response:list):
		"""
		This function processes the response generated by the api endpoints.
		The possible values for the api_endpoint are 'messages' and 'users'.
		"""
		if (self.__conn):
			if api_endpoint == 'messages':
				# for loop to iterate over the response variable
				for res in response:
					try:
						self.__cur.execute(self.__d.insert_query_message, (res['id'],res['receiverId'],res['senderId'],res['createdAt']))
						self.__conn.commit()
					except Exception as er:
						print("Data with message id",res['id'],'maybe already present!Please check once.')	
						pass

			if api_endpoint == 'users':
				self.__cur.execute(self.__d.open_encryption_query) # This runs the sql query to open encryption key.
				# for loop to iterate over the response variable
				for res in response:
					res = self.check_on_missing_values_if_any(res,self.__d.k_data['users'])
					res = self.check_on_missing_values_if_any(res,self.__d.k_data['users_profile'])

					# ---------------response Data Processing---------------------------------

					if res['profile']['isSmoking']==True:
						res['profile']['isSmoking']=1

					if res['profile']['isSmoking']==False:
						res['profile']['isSmoking']=0

					if res['email']!=None:
						res['email'] = res['email'].split('@')[-1]

					if res['profile']['gender']!=None:
						res['profile']['gender'] = res['profile']['gender'].upper()

					# -----------------------------------------------------------------------

					try:
						self.__cur.execute(self.__d.insert_query_users,(res['id'],res['firstName'],res['lastName'],res['address'],res['zipCode'],res['birthDate'],res['profile']['income'],res['city'],res['country'],res['email'],res['profile']['isSmoking'],res['profile']['profession'],res['profile']['gender'],res['createdAt'],res['updatedAt']))

						id = res['id']
						if len(res['subscription'])!=0:
							for r in res['subscription']:
								self.__cur.execute(self.__d.insert_query_subscription,(id,r['createdAt'],r['startDate'],r['endDate'],r['status'],r['amount']))
						self.__conn.commit()

					except Exception as e:
						print("Data with user id",res['id'],'maybe already present!Please check once.')
		else:
			print("Database connection is not successful")

	def check_on_missing_values_if_any(self,d:dict,keydata:list) -> dict:
		"""
		This function checks if any key in the dictionary is missing and adds None as the value.
		d : input dictionary
		keydata : list of the keys
		"""
		for k in keydata:
			if k not in d.keys():
				d[k]=None
		return d

	def closing_connection(self):
		"""
		This function closes the established database connection.
		"""
		self.__conn.close()
		print("DB connection closed.")

def main():
	# Crete the MainClass object
	mainClass = MainClass()

	# Get the response for 'users' endpoint
	response = mainClass.get_response('users')
	if response != [-1]:
		# Insert the response to the database
		mainClass.process_response('users',response)

	# Get the response for 'users' endpoint
	response = mainClass.get_response('messages')
	if response != [-1]:
		# Insert the response to the database
		mainClass.process_response('messages',response)
	
	# Close the established database connection
	mainClass.closing_connection()

if __name__ == '__main__':
	main()